# Generated by Django 3.2.12 on 2022-04-04 18:43

import bt.models.base
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AddOn',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, help_text='A description of the object.', null=True)),
                ('name', models.CharField(help_text='The name of the object.', max_length=64)),
                ('number_of_billing_cycles', models.PositiveIntegerField(blank=True, help_text='Specifies the number of billing cycles for the object.', null=True)),
                ('never_expires', models.BooleanField(help_text='Whether a billing cycle is set to never expire instead of running for a specific number of billing cycles.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The modifier amount.', max_digits=8)),
            ],
            options={
                'abstract': False,
            },
            bases=(bt.models.base.DefaultFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('created_at', models.DateTimeField(help_text='The date/time the object was created. Returned in UTC.')),
                ('updated_at', models.DateTimeField(help_text='The date/time the object was updated. Returned in UTC.')),
                ('company', models.CharField(blank=True, help_text='Company name.', max_length=128, null=True)),
                ('first_name', models.CharField(blank=True, help_text='First name.', max_length=128, null=True)),
                ('last_name', models.CharField(blank=True, help_text='Last name.', max_length=128, null=True)),
                ('address_id', models.AutoField(primary_key=True, serialize=False)),
                ('extended_address', models.CharField(blank=True, help_text='The extended address informationâ€”such as apartment or suite number.', max_length=128, null=True)),
                ('id', models.CharField(help_text='The two-letter value for an address associated with a specific customer ID. The maximum number of addresses per customer is 50.', max_length=2)),
                ('locality', models.CharField(blank=True, help_text='The locality/city.', max_length=128, null=True)),
                ('postal_code', models.CharField(blank=True, help_text='The postal code.', max_length=128, null=True)),
                ('region', models.CharField(blank=True, help_text='The state or province.', max_length=128, null=True)),
                ('street_address', models.CharField(blank=True, help_text='The street address.', max_length=256, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
            bases=(bt.models.base.DefaultFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CreditCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(help_text='The date/time the object was created. Returned in UTC.')),
                ('updated_at', models.DateTimeField(help_text='The date/time the object was updated. Returned in UTC.')),
                ('bin', models.CharField(help_text='The first 6 digits of the credit card, known as the bank identification number (BIN).', max_length=6)),
                ('card_type', models.CharField(help_text='The type of the credit card.', max_length=32)),
                ('cardholder_name', models.CharField(help_text='The cardholder name associated with the credit card.', max_length=175, null=True)),
                ('commercial', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], help_text='Whether the card type is a commercial card and is capable of processing Level 2 transactions.', max_length=8)),
                ('country_of_issuance', models.CharField(help_text='The country that issued the credit card. Possible country values follow ISO 3166-1.', max_length=8)),
                ('customer_location', models.CharField(choices=[('US', 'US'), ('International', 'International')], help_text='This is "US" if the billing address is in the US or if a country is not specified. The location is "International" if the billing country passed is not the US.', max_length=14)),
                ('debit', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], help_text='Whether the card is a debit card.', max_length=8)),
                ('default', models.BooleanField(default=False, help_text='Whether the card is the default for the customer.')),
                ('expiration_date', models.CharField(help_text='The expiration date, formatted MM/YY or MM/YYYY. May be used instead of expiration month and expiration year.', max_length=7)),
                ('expiration_month', models.CharField(help_text='The expiration month of a credit card, formatted MM. May be used with expiration year, and instead of expiration date.', max_length=7)),
                ('expiration_year', models.CharField(help_text='The two or four digit year associated with a credit card, formatted YYYY or YY. May be used with expiration month, and instead of expiration date.', max_length=7)),
                ('expired', models.BooleanField(default=False, help_text='Whether the card is expired.')),
                ('healthcare', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], help_text='Whether the card is a healthcare card.', max_length=8)),
                ('image_url', models.URLField(help_text='A URL that points to a payment method image resource (a PNG file) hosted by Braintree.')),
                ('issuing_bank', models.CharField(help_text='The bank that issued the credit card.', max_length=120)),
                ('last_4', models.CharField(help_text='The last 4 digits of the credit card number.', max_length=4)),
                ('masked_number', models.CharField(help_text='A value comprising the bank identification number (BIN), 6 asterisks blocking out the middle numbers (regardless of the number of digits present), and the last 4 digits of the card number. This complies with PCI security standards.', max_length=19)),
                ('payroll', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], help_text='Whether the card is a payroll card.', max_length=8)),
                ('prepaid', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], help_text='Whether the card is a prepaid card.', max_length=8)),
                ('token', models.CharField(help_text='An alphanumeric value that references a specific payment method stored in your Vault.', max_length=36)),
                ('unique_number_identifier', models.CharField(help_text="A randomly-generated string that uniquely identifies a credit card number in the Vault. If the same credit card is added to a merchant's Vault multiple times, each Vault entry will have the same unique identifier. This value is randomly generated by merchant gateway account, so it will be different for each merchant's Vault.", max_length=50)),
                ('billing_address', models.ForeignKey(help_text='The billing Address associated with this credit card.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='credit_cards', to='bt.address')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
            bases=(bt.models.base.DefaultFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(help_text='The date/time the object was created. Returned in UTC.')),
                ('updated_at', models.DateTimeField(help_text='The date/time the object was updated. Returned in UTC.')),
                ('company', models.CharField(blank=True, help_text='Company name.', max_length=128, null=True)),
                ('first_name', models.CharField(blank=True, help_text='First name.', max_length=128, null=True)),
                ('last_name', models.CharField(blank=True, help_text='Last name.', max_length=128, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email address composed of ASCII characters.', max_length=254, null=True)),
                ('fax', models.CharField(blank=True, help_text='Fax number.', max_length=30, null=True)),
                ('phone', models.CharField(blank=True, help_text='Phone number.', max_length=128, null=True)),
                ('website', models.URLField(blank=True, help_text='Website URL.', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(bt.models.base.DefaultFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, help_text='A description of the object.', null=True)),
                ('name', models.CharField(help_text='The name of the object.', max_length=64)),
                ('number_of_billing_cycles', models.PositiveIntegerField(blank=True, help_text='Specifies the number of billing cycles for the object.', null=True)),
                ('never_expires', models.BooleanField(help_text='Whether a billing cycle is set to never expire instead of running for a specific number of billing cycles.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The modifier amount.', max_digits=8)),
            ],
            options={
                'abstract': False,
            },
            bases=(bt.models.base.DefaultFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, help_text='A description of the object.', null=True)),
                ('name', models.CharField(help_text='The name of the object.', max_length=64)),
                ('price', models.DecimalField(decimal_places=2, help_text='The base price of the object.', max_digits=10)),
                ('created_at', models.DateTimeField(help_text='The date/time the object was created. Returned in UTC.')),
                ('updated_at', models.DateTimeField(help_text='The date/time the object was updated. Returned in UTC.')),
                ('number_of_billing_cycles', models.PositiveIntegerField(blank=True, help_text='Specifies the number of billing cycles for the object.', null=True)),
                ('billing_day_of_month', models.PositiveSmallIntegerField(blank=True, help_text='The value that specifies the day of the month that the gateway will charge the subscription on every billing cycle.', null=True)),
                ('trial_duration', models.PositiveIntegerField(blank=True, help_text='The trial timeframe duration.', null=True)),
                ('trial_duration_unit', models.CharField(blank=True, choices=[('day', 'day'), ('month', 'month')], help_text='The trial timeframe duration unit. Specify day or month.', max_length=16, null=True)),
                ('trial_period', models.BooleanField(default=False, help_text='A value indicating whether a subscription should begin with a trial period.')),
                ('billing_frequency', models.PositiveIntegerField(help_text='Specifies the billing interval of the plan in months.')),
                ('add_ons', models.ManyToManyField(blank=True, help_text='The collection of AddOn objects associated with an object.', to='bt.AddOn')),
                ('discounts', models.ManyToManyField(blank=True, help_text='The collection of Discount objects associated with an object.', to='bt.Discount')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
            bases=(bt.models.base.DefaultFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, help_text='A description of the object.', null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='The base price of the object.', max_digits=10)),
                ('created_at', models.DateTimeField(help_text='The date/time the object was created. Returned in UTC.')),
                ('updated_at', models.DateTimeField(help_text='The date/time the object was updated. Returned in UTC.')),
                ('number_of_billing_cycles', models.PositiveIntegerField(blank=True, help_text='Specifies the number of billing cycles for the object.', null=True)),
                ('never_expires', models.BooleanField(help_text='Whether a billing cycle is set to never expire instead of running for a specific number of billing cycles.')),
                ('billing_day_of_month', models.PositiveSmallIntegerField(blank=True, help_text='The value that specifies the day of the month that the gateway will charge the subscription on every billing cycle.', null=True)),
                ('trial_duration', models.PositiveIntegerField(blank=True, help_text='The trial timeframe duration.', null=True)),
                ('trial_duration_unit', models.CharField(blank=True, choices=[('day', 'day'), ('month', 'month')], help_text='The trial timeframe duration unit. Specify day or month.', max_length=16, null=True)),
                ('trial_period', models.BooleanField(default=False, help_text='A value indicating whether a subscription should begin with a trial period.')),
                ('current_billing_cycle', models.PositiveIntegerField(help_text="The object's current billing cycle. It is incremented each time the object is successfully billed or applied.")),
                ('balance', models.DecimalField(decimal_places=2, help_text='The balance of the subscription.', max_digits=10)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Canceled', 'Canceled'), ('Expired', 'Expired'), ('PastDue', 'PastDue'), ('Pending', 'Pending')], help_text='The subscription status.', max_length=32)),
                ('billing_period_end_date', models.DateField(help_text='The end date for the current billing period, regardless of subscription status. Automatic retries on past due subscriptions do not change the start and end dates of the current billing period.')),
                ('billing_period_start_date', models.DateField(help_text='The start date for the current billing period, regardless of subscription status. Automatic retries on past due subscriptions do not change the start and end dates of the current billing period.')),
                ('days_past_due', models.IntegerField(help_text='The number of days that the subscription is past due. Read more about the past due status in the Recurring Billing guide.', null=True)),
                ('failure_count', models.IntegerField(help_text="The number of consecutive failed attempts by our recurring billing engine to charge a subscription. This count includes the transaction attempt that caused the subscription's status to become past due, starting at 0 and increasing for each failed attempt. If the subscription is active and no charge attempts failed, the count is 0.")),
                ('first_billing_date', models.DateField(help_text='The day the subscription starts billing.')),
                ('merchant_account_id', models.CharField(help_text='The merchant account ID used for the subscription. Currency is also determined by merchant account ID.', max_length=256)),
                ('next_billing_date', models.DateField(help_text='The date that the gateway will try to bill the subscription again. The gateway adjusts this date each time it tries to charge the subscription. If the subscription is past due and you have set your processing options to automatically retry failed transactions, the gateway will continue to adjust this date, advancing it based on the settings that you configured in advanced settings.')),
                ('next_billing_period_amount', models.DecimalField(decimal_places=2, help_text='The total subscription amount for the next billing period. This amount includes add-ons and discounts but does not include the current balance.', max_digits=10)),
                ('paid_through_date', models.DateField(help_text='The date through which the subscription has been paid. It is the billing_period_end_date at the time of the last successful transaction. If the subscription is pending (has a future start date), this field is None.')),
            ],
            options={
                'abstract': False,
            },
            bases=(bt.models.base.DefaultFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubscriptionHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, help_text='The base price of the object.', max_digits=10)),
                ('balance', models.DecimalField(decimal_places=2, help_text='The balance of the subscription.', max_digits=10)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Canceled', 'Canceled'), ('Expired', 'Expired'), ('PastDue', 'PastDue'), ('Pending', 'Pending')], help_text='The subscription status.', max_length=32)),
                ('subscription_source', models.CharField(choices=[('api', 'api'), ('control_panel', 'control_panel'), ('recurring', 'recurring')], help_text='Where the subscription event was created.', max_length=32)),
                ('timestamp', models.DateTimeField(help_text='The date/time of the event. Returned in UTC.')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='bt.subscription')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubscriptionDiscount',
            fields=[
                ('name', models.CharField(help_text='The name of the object.', max_length=64)),
                ('quantity', models.PositiveIntegerField(help_text='The number of times this object is leveraged.')),
                ('number_of_billing_cycles', models.PositiveIntegerField(blank=True, help_text='Specifies the number of billing cycles for the object.', null=True)),
                ('never_expires', models.BooleanField(help_text='Whether a billing cycle is set to never expire instead of running for a specific number of billing cycles.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The modifier amount.', max_digits=8)),
                ('current_billing_cycle', models.PositiveIntegerField(help_text="The object's current billing cycle. It is incremented each time the object is successfully billed or applied.")),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('discount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_discounts', to='bt.discount')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_discounts', to='bt.subscription')),
            ],
            options={
                'abstract': False,
            },
            bases=(bt.models.base.DefaultFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubscriptionAddOn',
            fields=[
                ('name', models.CharField(help_text='The name of the object.', max_length=64)),
                ('quantity', models.PositiveIntegerField(help_text='The number of times this object is leveraged.')),
                ('number_of_billing_cycles', models.PositiveIntegerField(blank=True, help_text='Specifies the number of billing cycles for the object.', null=True)),
                ('never_expires', models.BooleanField(help_text='Whether a billing cycle is set to never expire instead of running for a specific number of billing cycles.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The modifier amount.', max_digits=8)),
                ('current_billing_cycle', models.PositiveIntegerField(help_text="The object's current billing cycle. It is incremented each time the object is successfully billed or applied.")),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('add_on', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_add_ons', to='bt.addon')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_add_ons', to='bt.subscription')),
            ],
            options={
                'abstract': False,
            },
            bases=(bt.models.base.DefaultFieldsMixin, models.Model),
        ),
        migrations.AddField(
            model_name='subscription',
            name='add_ons',
            field=models.ManyToManyField(blank=True, help_text='The collection of AddOn objects associated with an object.', related_name='subscriptions', through='bt.SubscriptionAddOn', to='bt.AddOn'),
        ),
        migrations.AddField(
            model_name='subscription',
            name='discounts',
            field=models.ManyToManyField(blank=True, help_text='The collection of Discount objects associated with an object.', related_name='subscriptions', through='bt.SubscriptionDiscount', to='bt.Discount'),
        ),
        migrations.AddField(
            model_name='subscription',
            name='payment_method',
            field=models.ForeignKey(help_text='An alphanumeric value that references a specific payment method stored in your Vault.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subscriptions', to='bt.creditcard'),
        ),
        migrations.AddField(
            model_name='subscription',
            name='plan',
            field=models.ForeignKey(help_text='The plan identifier.', on_delete=django.db.models.deletion.PROTECT, related_name='subscriptions', to='bt.plan'),
        ),
        migrations.AddField(
            model_name='creditcard',
            name='customer',
            field=models.ForeignKey(help_text='An existing customer in your Vault associated with this payment method.', on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to='bt.customer'),
        ),
        migrations.AddField(
            model_name='address',
            name='customer',
            field=models.ForeignKey(help_text='Customer that owns this address.', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='bt.customer'),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(fields=('customer_id', 'id'), name='customer_address'),
        ),
    ]
